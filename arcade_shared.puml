@startuml

enum LIBTYPE {
    TEXT,
    GRAPHIC,
    DEBUG
}

namespace ecs {
    ' using ComponentID = std::size_t
    ' using GroupID = std::string

    'inline ComponentID getNewComponentTypeID()
    'template <typename T> inline ComponentID getComponentTypeID() noexcept

    'inline GroupID getNewComponentTypeID()
    'inline GroupID getComponentTypeID(GroupID groupName) noexcept

    'constexpr std::size_t maxComponents = 32
    'constexpr std::size_t maxGroups = 64

    'using ComponentBitSet = std::bitset<maxComponents>
    'using ComponentArray = std::array<ecs::AComponent*, maxComponents>

    class Universe {
        - std::vector<std::reference_wrapper<WorldManager>> _managers

        + Universe()
        + ~Universe()
        + void addWorldManager(WorldManager& world)
        + void delWorldManager()
    }

    class WorldManager {
        - World& _world
        - std::vector<std::reference_wrapper<ASystem>> _systems
        - event::EventBus& _eventbus

        + WorldManager(World& _world)
        + ~WorldManager()
        + void addSystem(ASystem& system)
        + EventBus& getEventBus()
        + void init()
        + void update()
        + void render()
    }
    ecs.Universe <-- WorldManager

    class World {
        - std::vector<std::shared_ptr<Entity>> _entities
        - std::map<GroupID, std::vector<std::shared_ptr<Entity>>> _groups

        + void refresh()
        + void addToGroup(Entity* entity, GroupID group)
        + void delFromGroup(Entity* entity, GroupID group)
        + void hasGroup(Entity* entity, GroupID group)
        + std::vector<std::shared_ptr<Entity>>& getGroup(GroupID group)
        + template<typename... TArgs> std::vector<std::shared_ptr<Entity>>& getEntities()
        + Entity& addEntity()
    }
    ecs.WorldManager <-- World

    class Entity {
        - World& _world
        - bool _active = true
        - std::set<std::unique_ptr<AComponent>> _components {}
        - ComponentBitSet _componentBitSet
        - ComponentArray _componentArray

        + Entity(World& world)
        + ~Entity()
        + bool isActive()
        + void disable()
        + template <typename T> bool hasComponent()
        + template <typename T, typename... TArgs> T& addComponent(TArgs&&... mArgs)
        + template <typename T> T& getComponent()
    }
    ecs.World <-- Entity
    ecs.AComponent <-- Entity

    abstract AComponent {
        # Entity& _entity

        + virtual ~AComponent() = 0
        + void setParent(Entity& entity)
    }
    ecs.Entity <-- AComponent

    interface IAnimation {
        + virtual ~IAnimation() = 0
        + virtual int frame() const = 0
        + virtual int speed() const = 0
        + virtual int index() const = 0
    }

    class Vector2d {
        + int x
        + int y
    }

    namespace component {
        class Transform {
            + Vector2d position

            + Transform()
            + ~Transform()
        }
        ecs.AComponent <|-- Transform

        class Motion {
            + Vector2d velocity
            + Vector2d acceleration

            + Motion()
            + ~Motion()
        }
        ecs.AComponent <|-- Motion

        class Size {
            + int w
            + int h

            + Size()
            + ~Size()
        }
        ecs.AComponent <|-- Size

        class Hitbox {
            + int w
            + int h

            + Hitbox()
            + ~Hitbox()
        }
        ecs.AComponent <|-- Hitbox

        abstract ARenderable {
            + virtual ~Renderable() = 0
            + virtual void setTexture(std::string name) = 0
            + virtual void setAnimation(std::string animationName, ecs::IAnimation animation) = 0
            + virtual std::string getCurrentAnimation() = 0
            + virtual void useAnimation(std::string animationName) = 0 
        }
        ecs.AComponent <|-- ARenderable

        class Follow {
            + Entity& followed

            + Follow(Entity& followed)
            + ~Follow()
        }
        ecs.AComponent <|-- Follow

        class AI {
            + AI()
            + ~AI()
        }
        ecs.AComponent <|-- AI

        class Input {
            + Input()
            + ~Input()
        }
        ecs.AComponent <|-- Input
    }

    abstract ASystem {
        + virtual ~ASystem() = 0
        + virtual void init(event::EventBus& eventbus) = 0
        + virtual void update(World& world) = 0
        + virtual void render(World& world) = 0
    }
    ecs.WorldManager <-- ASystem

    namespace system {
        ' Checks for collisions (use Transform and Hitbox)
        class Physics {
            + Physics()
            + ~Physics()
            + void init(event::EventBus& eventbus) override
            + void update(World& world) override
            + void render(World& world) override
        }
        ecs.ASystem <|-- Physics

        ' Allow User to be moved (use Motion and Input)
        abstract AUser {
            + AUser()
            + virtual ~AUser() = 0
            + void init(event::EventBus& eventbus) override = 0
            + void update(World& world) override = 0
            + void render(World& world) override = 0
        }
        ecs.ASystem <|-- AUser

        ' Moves AI (use Motion and AI)
        abstract AAI {
            + AAI()
            + virtual ~AAI() = 0
            + void init(event::EventBus& eventbus) override = 0
            + void update(World& world) override = 0
            + void render(World& world) override = 0
        }
        ecs.ASystem <|-- AAI

        ' Allow entity to follow another entity (use Motion and Follow)
        abstract AFollow {
            + AFollow()
            + virtual ~AFollow() = 0
            + void init(event::EventBus& eventbus) override = 0
            + void update(World& world) override = 0
            + void render(World& world) override = 0
        }
        ecs.ASystem <|-- AFollow

        ' Update velocity and position (use Transform and Motion)
        class Movement {
            + Movement()
            + ~Movement()
            + void init(event::EventBus& eventbus) override
            + void update(World& world) override
            + void render(World& world) override
        }
        ecs.ASystem <|-- Movement

        ' Draws sprites to the screen (use ARenderable, Size and Transform)
        abstract AGraphics {
            + AGraphics()
            + virtual ~AGraphics() = 0
            + void init(event::EventBus& eventbus) override = 0
            + void update(World& world) override = 0
            + void render(World& world) override = 0
        }
        ecs.ASystem <|-- AGraphics
    }
}

namespace graphical {
    interface IGraphical {
        + virtual ~IGraphical() = 0
        + virtual std::string getName() = 0
        + virtual LIBTYPE getType() = 0
        + virtual ecs::component::ARenderable createRenderable(std::vector<std::string> paths, bool isAnimated = false) = 0
        + virtual ecs::IAnimation createAnimation(int index, int frame, int speed) = 0
        + virtual ecs::system::AGraphics createGraphics() = 0
        + virtual void eventHandler(EventBus& eventbus) = 0
    }

    abstract AGraphical {    
        + AGraphical(LIBTYPE type, std::string name, Universe& universe)
        + ~AGraphical() override = 0
        + std::string getName() override
        + LIBTYPE getType() override
        + ecs::component::ARenderable createRenderable(std::vector<std::string> paths, bool isAnimated = false) override = 0
        + ecs::IAnimation createAnimation(int index, int frame, int speed) override = 0
        + ecs::system::AGraphics createGraphics() override = 0
        + void eventHandler(EventBus& eventbus) override = 0
    }
    IGraphical <|-- AGraphical

    class Animation {
        + Animation(int index, int frame, int speed)
        + ~Animation()
        + int frame() const override
        + int speed() const override
        + int index() const override
    }
    ecs.IAnimation <|-- Animation

    namespace sfml {
        class Graphical {
            + Graphical(Universe& universe)
            + ~Graphical()
            + LIBTYPE getType() override
            + ecs::component::ARenderable createRenderable(std::vector<std::string> paths, bool isAnimated = false) override
            + ecs::IAnimation createAnimation(int index, int frame, int speed) override
        }
        graphical.AGraphical <|-- Graphical

        namespace component {
            class Renderable {
                + Sprite(std::string name, bool isAnimated = false)
                + ~Sprite()
                + void setTexture(std::string name) override
                + void setAnimation(std::string animationName, ecs::IAnimation animation) override
                + std::string getCurrentAnimation() override
                + void useAnimation(std::string animationName) override
            }
            ecs.component.ARenderable <|-- Renderable
        }

        namespace system {
            class Graphics {
                + Graphics()
                + ~Graphics()
                + void init(event::EventBus& eventbus) override
                + void update(World& world) override
                + void render(World& world) override
            }
            ecs.system.AGraphics <|-- Graphics
        }
    }

    namespace sdl {
        class Graphical {
            + Graphical(Universe& universe)
            + ~Graphical()
            + LIBTYPE getType() override
            + ecs::component::ARenderable createRenderable(std::vector<std::string> paths, bool isAnimated = false) override
            + ecs::IAnimation createAnimation(int index, int frame, int speed) override
            + ecs::system::AGraphics createGraphics() override
            + void eventHandler(EventBus& eventbus) override
        }
        graphical.AGraphical <|-- Graphical

        namespace component {
            class Renderable {
                + Sprite(std::string name, bool isAnimated = false)
                + ~Sprite()
                + void setTexture(std::string name) override
                + void setAnimation(std::string animationName, ecs::IAnimation animation) override
                + std::string getCurrentAnimation() override
                + void useAnimation(std::string animationName) override
            }
            ecs.component.ARenderable <|-- Renderable
        }

        namespace system {
            class Graphics {
                + Graphics()
                + ~Graphics()
                + void init(event::EventBus& eventbus) override
                + void update(World& world) override
                + void render(World& world) override
            }
            ecs.system.AGraphics <|-- Graphics
        }
    }

    namespace ncurses {
        class Graphical {
            + Graphical(Universe& universe)
            + ~Graphical()
            + LIBTYPE getType() override
            + ecs::component::ARenderable createRenderable(std::vector<std::string> paths, bool isAnimated = false) override
            + ecs::IAnimation createAnimation(int index, int frame, int speed) override
            + ecs::system::AGraphics createGraphics() override
            + void eventHandler(EventBus& eventbus) override
        }
        graphical.AGraphical <|-- Graphical

        namespace component {
            class Renderable {
                + Sprite(std::string name, bool isAnimated = false)
                + ~Sprite()
                + void setAnimation(std::string animationName, ecs::IAnimation animation) override
                + std::string getCurrentAnimation() override
                + void useAnimation(std::string animationName) override
            }
            ecs.component.ARenderable <|-- Renderable
        }

        namespace system {
            class Graphics {
                + Graphics()
                + ~Graphics()
                + void init(event::EventBus& eventbus) override
                + void update(World& world) override
                + void render(World& world) override
            }
            ecs.system.AGraphics <|-- Graphics
        }
    }
}

namespace game {
    interface IGame {
        + virtual ~IGame() = 0
        + virtual std::string getName() = 0
        + virtual void init() = 0
        + virtual void setGraphical(IGraphical& graph) = 0
        + virtual ecs::system::AFollow createFollow() = 0
        + virtual ecs::system::AAI createAI() = 0
        + virtual ecs::system::AUser createUser() = 0
    }

    abstract AGame {
        + AGame(Universe& universe, IGraphical& graph, std::string name)
        + virtual ~AGame() = 0
        + std::string getName() override
        + void init() override = 0
        + void setGraphical(IGraphical& graph) override
        + ecs::system::AFollow createFollow() override = 0
        + ecs::system::AAI createAI() override = 0
        + ecs::system::AUser createUser() override = 0
    }
    IGame <|-- AGame

    namespace nibbler {
        class Game {
            + Game(Universe& universe, IGraphical& graph)
            + ~Game()
            + void init() override
            + ecs::system::AFollow createFollow() override
            + ecs::system::AAI createAI() override
            + ecs::system::AUser createUser() override
        }
        game.AGame <|-- Game

        namespace component {
            
        }

        namespace system {
            class User {
                + User()
                + ~User()
                + void init(event::EventBus& eventbus) override
                + void update(World& world) override
                + void render(World& world) override
            }
            ecs.system.AUser <|-- User

            class AI {
                + AI()
                + ~AI()
                + void init(event::EventBus& eventbus) override
                + void update(World& world) override
                + void render(World& world) override
            }
            ecs.system.AAI <|-- AI

            class Follow {
                + Follow()
                + ~Follow()
                + void init(event::EventBus& eventbus) override
                + void update(World& world) override
                + void render(World& world) override
            }
            ecs.system.AFollow <|-- Follow
        }
    }

    namespace pacman {
        class Game {
            + Game(Universe& universe, IGraphical& graph)
            + ~Game()
            + void init() override
            + ecs::system::AFollow createFollow() override
            + ecs::system::AAI createAI() override
            + ecs::system::AUser createUser() override
        }
        game.AGame <|-- Game

        namespace component {
            
        }

        namespace system {
            class User {
                + User()
                + ~User()
                + void init(event::EventBus& eventbus) override
                + void update(World& world) override
                + void render(World& world) override
            }
            ecs.system.AUser <|-- User

            class AI {
                + AI()
                + ~AI()
                + void init(event::EventBus& eventbus) override
                + void update(World& world) override
                + void render(World& world) override
            }
            ecs.system.AAI <|-- AI

            class Follow {
                + Follow()
                + ~Follow()
                + void init(event::EventBus& eventbus) override
                + void update(World& world) override
                + void render(World& world) override
            }
            ecs.system.AFollow <|-- Follow
        }
    }
}

' DON'T REUSE THE CORE
namespace core {
    class Core {
        + Core()
        + ~Core()
        + Universe& addUniverse()
        + void loadGraphicals()
        + void loadGames()
        + IGraphical& getCurrentGraphical()
        + void setCurrentGraphical(std::size_t index)
        + IGame& getCurrentGame()
        + void setCurrentGame(std::size_t index)
        + Menu createMenu()
    }

    class Menu {
        + Menu(Universe& universe, std::vector<IGraphical>& graphicals, std::vector<IGame>& games)
        + ~Menu()
        + void init()
        - void createSystems()
        - void createEntities()
        + ecs::system::AUser createUser()
    }
    game.IGame <|-- Menu

    namespace system {
        class User {
            + User()
            + ~User()
            + void init(event::EventBus& eventbus) override
            + void update(World& world) override
            + void render(World& world) override
        }
        ecs.system.AUser <|-- User
    }
}

namespace event {
    class Event {
        + Event()
        + ~Event()
    }

    class InputEvent {

    }
    event.Event <|-- InputEvent

    class CollisionEvent {

    }
    event.Event <|-- CollisionEvent

    abstract AFunctionHandler {
        - virtual void call(Event* event) = 0
        + void exec(Event* event)
    }

    ' template<class T, class EventType>
    class FunctionHandler {
        ' typedef void (T::*MemberFunction)(EventType*)

        + FunctionHandler(T* instance, MemberFunction memberFunction)
        + void call(Event* event) override
    }
    event.AFunctionHandler <|-- FunctionHandler

    class EventBus {
        + template<class T, class EventType> void subscribe(T * instance, void (T::*memberFunction)(EventType *))
        + template<typename EventType> void publish(EventType* event) 
    }
}

@enduml