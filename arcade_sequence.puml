@startuml

== Initialization ==
participant Game
participant Graph
participant Core

activate Core
activate Graph

Core <- Core: createManager()
Core -> manager **: create()
activate manager

Game <- Core **: create(manager, Graph)
activate Game

manager <- Game: addEntity()
manager -> pacman **: create()
activate pacman
Game <-- manager: createdEntity

Game -> pacman: addComponent<component::Position>()
pacman -> position **: create()
activate position
Game <-- pacman: createdComponent

Game -> pacman: addComponent<component::ARenderable>({"ressources/pacman.txt", "ressources/pacman.png", "pacman_texture"})
Graph <- pacman: createRenderable({"ressources/pacman.txt", "ressources/pacman.png", "pacman_texture"})
Graph -> renderable **: create("ressources/pacman.png")
activate renderable
Graph --> pacman: createdRenderable
Game <-- pacman: createdComponent

Game -> Graph: createAnimation(0, 1, 100)
Graph -> Anim1 **: create(0, 1, 100)
activate Anim1
Game <-- Graph: createdAnimation

Game -> renderable: setAnimation("Idle", Anim1)

Game -> Graph: createAnimation(1, 5, 100)
Graph -> Anim2 **: create(1, 5, 100)
activate Anim2
Game <-- Graph: createdAnimation

Game -> renderable: setAnimation("Move", Anim2)

Game -> Graph: createAnimation(1, 3, 50)
Graph -> Anim3 **: create(1, 3, 50)
activate Anim3
Game <-- Graph: createdAnimation

Game -> renderable: setAnimation("Die", Anim3)

== Game loop ==

@enduml